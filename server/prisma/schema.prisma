generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* ===== Enums ===== */

enum UserRole {
  USER
  ADMIN
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum PaymentMethod {
  TRANSFER
  CASH
  CARD
  OTHER
}

/* ===== Models ===== */

model User {
  id              String    @id @default(uuid())
  email           String    @unique
  passwordHash    String    @map("password")    // w kodzie: passwordHash; w DB: "password"
  fullName        String

  // adres
  street          String
  houseNumber     String
  postalCode      String
  city            String

  // dane firmy (opcjonalne)
  companyName     String?
  nip             String?   @unique             // Postgres pozwala na wiele NULL
  phoneNumber     String?

  // rozliczenia (opcjonalne)
  bank            String?
  account         String?

  // systemowe
  role            UserRole  @default(USER)
  emailVerifiedAt DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // relacje
  clients         Client[]
  invoices        Invoice[]

  @@index([email])
}

model Client {
  id          String    @id @default(uuid())
  name        String
  email       String
  street      String
  houseNumber String
  postalCode  String
  city        String
  pesel       String?

  // relacja do właściciela (User)
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String

  invoices Invoice[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Ten klient ma być unikatowy per użytkownik po emailu:
  @@unique([userId, email])
  @@index([userId])
}

model Invoice {
  id             String    @id @default(uuid())
  number         String?   // numer (unikalny per użytkownik — patrz @@unique niżej)
  title          String
  amount         Decimal   @db.Decimal(12, 2)   // pieniądze -> Decimal, nie Float
  status         InvoiceStatus
  vatPercentage  Decimal?  @db.Decimal(5, 2)

  // relacje
  client   Client  @relation(fields: [clientId], references: [id], onDelete: Restrict)
  clientId String
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String

  // daty
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  dueDate       DateTime?
  issuedAt      DateTime?  // opcjonalnie, jeśli generujesz datę wystawienia

  paymentMethod PaymentMethod?

  items   InvoiceItem[]

  // numer faktury unikalny per user (pozwala mieć „FV-001” u różnych userów)
  @@unique([userId, number])
  @@index([clientId])
  @@index([userId])
}

model InvoiceItem {
  id        String   @id @default(uuid())
  invoice   Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  invoiceId String

  lp       Int
  name     String
  quantity Decimal  @db.Decimal(10, 2)
  unit     String
  price    Decimal  @db.Decimal(12, 2)
  total    Decimal  @db.Decimal(12, 2)  // można też liczyć w kodzie, ale zostawiam, jeśli chcesz trzymać

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([invoiceId])
}
